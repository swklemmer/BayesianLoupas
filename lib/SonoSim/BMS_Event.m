function [SeqControl, Event] = BMS_Event(P)
% Specify structure arrays for the Event Sequence.

% Specify the Sequence of Events

% Event and SC count
n = 1;
nsc = 1;
    
% Tracking b-mode
for i = 1:P.bmode_adq

    Event(n) = struct('info', 'Tracking b-mode', ...
    'tx', 1 + mod(i, P.n_ang), ...
    'rcv', i, ...
    'recon', 0, ...
    'process', 0, ...
    'seqControl', nsc);

    n = n + 1; 
end

% Wait P.bmode_dly [usec] for next adq
SeqControl(nsc) = struct( ...
    'command', 'timeToNextAcq', ...
    'argument', P.bmode_dly, ...
    'condition', '');

nsc = nsc + 1;

% Transfer adquisitions to host after last acquisition
Event(n-1).seqControl = nsc;

% Transfer to Host
SeqControl(nsc) = struct( ...
    'command', 'transferToHost', ...
    'argument', 0, ...
    'condition', '');

nsc = nsc + 1;

% Reconstruct into Interbuffer
Event(n) = struct('info', 'Reconstruct into Interbuffer', ...
    'tx', 0, ...
    'rcv', 0, ...
    'recon', 1, ...
    'process', 0, ...
    'seqControl', nsc);

    % Wait for transfer to be completed
    SeqControl(nsc) = struct( ...
        'command', 'waitForTransferComplete', ...
        'argument', nsc - 1, ...
        'condition', '');
    
   n = n + 1; nsc = nsc + 1;

% Perform beamforming process and close
Event(n) = struct('info', 'Perform beamforming process', ...
    'tx', 0, ...
    'rcv', 0, ...
    'recon', 0, ...
    'process', 1, ...
    'seqControl', 0);

    n = n + 1;

% Jump back to Event 2 and go back to Matlab
Event(n) = struct('info', 'Jump back to Event 2', ...
    'tx', 0, ...
    'rcv', 0, ...
    'recon', 0, ...
    'process', 0, ...
    'seqControl', nsc); % don't jump nack for debugging

    % Jump back to Event 2
%     SeqControl(nsc) = struct( ...
%         'command', 'jump', ...
%         'argument', 2, ...
%         'condition', 'exitAfterJump');

%     % Return to Matlab
    SeqControl(nsc) = struct( ...
        'command', 'returnToMatlab', ...
        'argument', 0, ...
        'condition', '');

end
